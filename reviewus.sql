-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.audit_logs
(
    id bigserial NOT NULL,
    user_id uuid,
    tenant_id uuid,
    entity text COLLATE pg_catalog."default",
    action text COLLATE pg_catalog."default",
    payload jsonb,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT audit_logs_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.comments
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    post_id uuid,
    user_id uuid,
    tenant_id uuid,
    rating smallint,
    title text COLLATE pg_catalog."default",
    content text COLLATE pg_catalog."default" NOT NULL,
    status text COLLATE pg_catalog."default" DEFAULT 'pending'::text,
    parent_id uuid,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT comments_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.destinations
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    tenant_id uuid,
    name text COLLATE pg_catalog."default" NOT NULL,
    slug text COLLATE pg_catalog."default" NOT NULL,
    latitude numeric(9, 6),
    longitude numeric(9, 6),
    description text COLLATE pg_catalog."default",
    cover_image_id uuid,
    schema_markup jsonb,
    CONSTRAINT destinations_pkey PRIMARY KEY (id),
    CONSTRAINT destinations_slug_key UNIQUE (slug)
);

CREATE TABLE IF NOT EXISTS public.jobs
(
    id bigserial NOT NULL,
    tenant_id uuid,
    type text COLLATE pg_catalog."default" NOT NULL,
    payload jsonb,
    status text COLLATE pg_catalog."default" DEFAULT 'pending'::text,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT jobs_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.media
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    tenant_id uuid,
    url text COLLATE pg_catalog."default" NOT NULL,
    alt text COLLATE pg_catalog."default",
    meta jsonb,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT media_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.menu_items
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    menu_id uuid,
    label text COLLATE pg_catalog."default" NOT NULL,
    url text COLLATE pg_catalog."default",
    post_id uuid,
    parent_id uuid,
    "position" integer DEFAULT 0,
    CONSTRAINT menu_items_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.menus
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    tenant_id uuid,
    name text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT menus_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.points_of_interest
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    destination_id uuid,
    name text COLLATE pg_catalog."default" NOT NULL,
    type text COLLATE pg_catalog."default",
    address text COLLATE pg_catalog."default",
    CONSTRAINT points_of_interest_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.post_relations
(
    post_id uuid NOT NULL,
    related_post_id uuid NOT NULL,
    relation_type text COLLATE pg_catalog."default" DEFAULT 'related'::text,
    CONSTRAINT post_relations_pkey PRIMARY KEY (post_id, related_post_id)
);

CREATE TABLE IF NOT EXISTS public.post_revisions
(
    id bigserial NOT NULL,
    post_id uuid,
    editor_id uuid,
    body jsonb,
    seo_meta jsonb,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT post_revisions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.post_taxonomies
(
    post_id uuid NOT NULL,
    taxonomy_id uuid NOT NULL,
    CONSTRAINT post_taxonomies_pkey PRIMARY KEY (post_id, taxonomy_id)
);

CREATE TABLE IF NOT EXISTS public.post_translations
(
    post_id uuid NOT NULL,
    locale text COLLATE pg_catalog."default" NOT NULL,
    title text COLLATE pg_catalog."default",
    excerpt text COLLATE pg_catalog."default",
    body jsonb,
    seo_meta jsonb,
    CONSTRAINT post_translations_pkey PRIMARY KEY (post_id, locale)
);

CREATE TABLE IF NOT EXISTS public.posts
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    tenant_id uuid,
    title text COLLATE pg_catalog."default" NOT NULL,
    slug text COLLATE pg_catalog."default" NOT NULL,
    excerpt text COLLATE pg_catalog."default",
    body jsonb,
    status text COLLATE pg_catalog."default" DEFAULT 'draft'::text,
    author_id uuid,
    destination_id uuid,
    publish_at timestamp without time zone,
    seo_meta jsonb,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    schema_markup jsonb,
    canonical_url text COLLATE pg_catalog."default",
    meta_robots text COLLATE pg_catalog."default" DEFAULT 'index,follow'::text,
    structured_data jsonb,
    CONSTRAINT posts_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.redirects
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    tenant_id uuid,
    from_url text COLLATE pg_catalog."default" NOT NULL,
    to_url text COLLATE pg_catalog."default" NOT NULL,
    status_code smallint DEFAULT 301,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT redirects_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT roles_pkey PRIMARY KEY (id),
    CONSTRAINT roles_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.search_index
(
    post_id uuid NOT NULL,
    tenant_id uuid,
    document tsvector,
    CONSTRAINT search_index_pkey PRIMARY KEY (post_id)
);

CREATE TABLE IF NOT EXISTS public.settings
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    tenant_id uuid,
    key text COLLATE pg_catalog."default" NOT NULL,
    value jsonb,
    CONSTRAINT settings_pkey PRIMARY KEY (id),
    CONSTRAINT settings_tenant_id_key_key UNIQUE (tenant_id, key)
);

CREATE TABLE IF NOT EXISTS public.sitemaps
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    tenant_id uuid,
    type text COLLATE pg_catalog."default" NOT NULL,
    url text COLLATE pg_catalog."default" NOT NULL,
    last_modified timestamp without time zone DEFAULT now(),
    priority numeric(2, 1) DEFAULT 0.5,
    change_frequency text COLLATE pg_catalog."default" DEFAULT 'weekly'::text,
    CONSTRAINT sitemaps_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.taxonomies
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    tenant_id uuid,
    type text COLLATE pg_catalog."default" NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    slug text COLLATE pg_catalog."default" NOT NULL,
    parent_id uuid,
    CONSTRAINT taxonomies_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.tenants
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    slug text COLLATE pg_catalog."default" NOT NULL,
    domain text COLLATE pg_catalog."default" NOT NULL,
    locale_default text COLLATE pg_catalog."default" DEFAULT 'en-US'::text,
    seo_defaults jsonb,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT tenants_pkey PRIMARY KEY (id),
    CONSTRAINT tenants_domain_key UNIQUE (domain),
    CONSTRAINT tenants_slug_key UNIQUE (slug)
);

CREATE TABLE IF NOT EXISTS public.user_roles
(
    user_id uuid NOT NULL,
    role_id uuid NOT NULL,
    CONSTRAINT user_roles_pkey PRIMARY KEY (user_id, role_id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    email text COLLATE pg_catalog."default" NOT NULL,
    password_hash text COLLATE pg_catalog."default" NOT NULL,
    display_name text COLLATE pg_catalog."default",
    tenant_id uuid,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_email_key UNIQUE (email)
);

CREATE TABLE geo_entities (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id uuid NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
    name text NOT NULL,              -- Tên hiển thị: "Ninh Thuận", "California"
    slug text NOT NULL,              -- slug cho URL: "ninh-thuan"
    type text NOT NULL,              -- "country", "province", "district", "territory"
    level smallint,                  -- cấp hành chính: 1=country, 2=province, 3=district...
    description text,                -- mô tả SEO hoặc nội dung hiển thị
    seo_meta jsonb,                  -- SEO data (title, desc, keywords, og:image)
    created_at timestamp DEFAULT now(),
    updated_at timestamp DEFAULT now(),
    UNIQUE (tenant_id, slug)
);

CREATE TABLE geo_shapes (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    geo_entity_id uuid NOT NULL REFERENCES geo_entities(id) ON DELETE CASCADE,
    geometry jsonb NOT NULL,         -- GeoJSON Polygon/MultiPolygon/LineString/Point
    properties jsonb,                -- dữ liệu bổ sung (màu, nhãn, style hiển thị)
    created_at timestamp DEFAULT now()
);

CREATE TABLE geo_translations (
    geo_entity_id uuid NOT NULL REFERENCES geo_entities(id) ON DELETE CASCADE,
    locale text NOT NULL,
    name text,
    description text,
    seo_meta jsonb,
    PRIMARY KEY (geo_entity_id, locale)
);


ALTER TABLE IF EXISTS public.comments
    ADD CONSTRAINT comments_parent_id_fkey FOREIGN KEY (parent_id)
    REFERENCES public.comments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.comments
    ADD CONSTRAINT comments_post_id_fkey FOREIGN KEY (post_id)
    REFERENCES public.posts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.comments
    ADD CONSTRAINT comments_tenant_id_fkey FOREIGN KEY (tenant_id)
    REFERENCES public.tenants (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.comments
    ADD CONSTRAINT comments_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.destinations
    ADD CONSTRAINT destinations_cover_image_id_fkey FOREIGN KEY (cover_image_id)
    REFERENCES public.media (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.destinations
    ADD CONSTRAINT destinations_tenant_id_fkey FOREIGN KEY (tenant_id)
    REFERENCES public.tenants (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.jobs
    ADD CONSTRAINT jobs_tenant_id_fkey FOREIGN KEY (tenant_id)
    REFERENCES public.tenants (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.media
    ADD CONSTRAINT media_tenant_id_fkey FOREIGN KEY (tenant_id)
    REFERENCES public.tenants (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_media_tenant
    ON public.media(tenant_id);


ALTER TABLE IF EXISTS public.menu_items
    ADD CONSTRAINT menu_items_menu_id_fkey FOREIGN KEY (menu_id)
    REFERENCES public.menus (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.menu_items
    ADD CONSTRAINT menu_items_parent_id_fkey FOREIGN KEY (parent_id)
    REFERENCES public.menu_items (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.menu_items
    ADD CONSTRAINT menu_items_post_id_fkey FOREIGN KEY (post_id)
    REFERENCES public.posts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.menus
    ADD CONSTRAINT menus_tenant_id_fkey FOREIGN KEY (tenant_id)
    REFERENCES public.tenants (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.points_of_interest
    ADD CONSTRAINT points_of_interest_destination_id_fkey FOREIGN KEY (destination_id)
    REFERENCES public.destinations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.post_relations
    ADD CONSTRAINT post_relations_post_id_fkey FOREIGN KEY (post_id)
    REFERENCES public.posts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.post_relations
    ADD CONSTRAINT post_relations_related_post_id_fkey FOREIGN KEY (related_post_id)
    REFERENCES public.posts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.post_revisions
    ADD CONSTRAINT post_revisions_editor_id_fkey FOREIGN KEY (editor_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.post_revisions
    ADD CONSTRAINT post_revisions_post_id_fkey FOREIGN KEY (post_id)
    REFERENCES public.posts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.post_taxonomies
    ADD CONSTRAINT post_taxonomies_post_id_fkey FOREIGN KEY (post_id)
    REFERENCES public.posts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_post_taxonomies_post_id
    ON public.post_taxonomies(post_id);


ALTER TABLE IF EXISTS public.post_taxonomies
    ADD CONSTRAINT post_taxonomies_taxonomy_id_fkey FOREIGN KEY (taxonomy_id)
    REFERENCES public.taxonomies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_post_taxonomies_taxonomy_id
    ON public.post_taxonomies(taxonomy_id);


ALTER TABLE IF EXISTS public.post_translations
    ADD CONSTRAINT post_translations_post_id_fkey FOREIGN KEY (post_id)
    REFERENCES public.posts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.posts
    ADD CONSTRAINT posts_author_id_fkey FOREIGN KEY (author_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.posts
    ADD CONSTRAINT posts_destination_id_fkey FOREIGN KEY (destination_id)
    REFERENCES public.destinations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.posts
    ADD CONSTRAINT posts_tenant_id_fkey FOREIGN KEY (tenant_id)
    REFERENCES public.tenants (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.redirects
    ADD CONSTRAINT redirects_tenant_id_fkey FOREIGN KEY (tenant_id)
    REFERENCES public.tenants (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.search_index
    ADD CONSTRAINT search_index_post_id_fkey FOREIGN KEY (post_id)
    REFERENCES public.posts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS search_index_pkey
    ON public.search_index(post_id);


ALTER TABLE IF EXISTS public.settings
    ADD CONSTRAINT settings_tenant_id_fkey FOREIGN KEY (tenant_id)
    REFERENCES public.tenants (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.sitemaps
    ADD CONSTRAINT sitemaps_tenant_id_fkey FOREIGN KEY (tenant_id)
    REFERENCES public.tenants (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.taxonomies
    ADD CONSTRAINT taxonomies_parent_id_fkey FOREIGN KEY (parent_id)
    REFERENCES public.taxonomies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.taxonomies
    ADD CONSTRAINT taxonomies_tenant_id_fkey FOREIGN KEY (tenant_id)
    REFERENCES public.tenants (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_roles
    ADD CONSTRAINT user_roles_role_id_fkey FOREIGN KEY (role_id)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.user_roles
    ADD CONSTRAINT user_roles_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT users_tenant_id_fkey FOREIGN KEY (tenant_id)
    REFERENCES public.tenants (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_users_tenant
    ON public.users(tenant_id);

END;